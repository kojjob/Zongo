<%= form_with model: payment_method, class: "space-y-6" do |f| %>
  <%# Method Type Selection with Vibrant Visual Icons %>
  <div>
    <%= f.label :method_type, "Payment Method Type", class: "block text-lg font-medium text-gray-800 dark:text-gray-200 mb-3" %>
    <div class="grid grid-cols-2 md:grid-cols-4 gap-4 mb-4">
      <% [
        {name: 'Bank Account', value: 'bank', icon: 'bank', color: 'blue', gradient: 'from-blue-500 to-indigo-600', bg_color: 'bg-gradient-to-br from-blue-500 to-indigo-600'},
        {name: 'Credit/Debit Card', value: 'card', icon: 'credit-card', color: 'purple', gradient: 'from-purple-500 to-pink-600', bg_color: 'bg-gradient-to-br from-purple-500 to-pink-600'},
        {name: 'Mobile Money', value: 'mobile_money', icon: 'smartphone', color: 'green', gradient: 'from-green-500 to-emerald-600', bg_color: 'bg-gradient-to-br from-green-500 to-emerald-600'},
        {name: 'Digital Wallet', value: 'wallet', icon: 'wallet', color: 'orange', gradient: 'from-orange-500 to-amber-600', bg_color: 'bg-gradient-to-br from-orange-500 to-amber-600'}
      ].each do |method| %>
        <div class="method-type-option relative">
          <%= f.radio_button :method_type, method[:value], class: "sr-only method-type-input", required: true, autofocus: true %>
          <%= f.label "method_type_#{method[:value]}", class: "method-type-label flex flex-col items-center justify-center p-4 border-2 border-gray-200 dark:border-gray-700 rounded-lg cursor-pointer transition-all duration-200 hover:border-#{method[:color]}-400 dark:hover:border-#{method[:color]}-500 hover:shadow-lg" do %>
            <div class="w-20 h-20 rounded-full <%= method[:bg_color] %> shadow-md flex items-center justify-center mb-3 transform transition-transform duration-200 hover:scale-105">
              <%= icon method[:icon], class: "w-10 h-10 text-white" %>
            </div>
            <span class="text-sm font-medium text-gray-900 dark:text-white"><%= method[:name] %></span>
            <div class="absolute top-2 right-2 w-5 h-5 rounded-full border-2 border-gray-300 dark:border-gray-600 method-type-radio flex items-center justify-center">
              <div class="w-3 h-3 rounded-full bg-#{method[:color]}-500 dark:bg-#{method[:color]}-400 hidden method-type-radio-checked"></div>
            </div>
            <div class="absolute -top-1 -right-1 w-6 h-6 rounded-full <%= method[:bg_color] %> text-white flex items-center justify-center text-xs font-bold opacity-0 method-type-badge transform scale-0 transition-all duration-200">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" viewBox="0 0 20 20" fill="currentColor">
                <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd" />
              </svg>
            </div>
          <% end %>
        </div>
      <% end %>

      <div class="method-type-option relative">
        <%= f.radio_button :method_type, 'other', class: "sr-only method-type-input", required: true %>
        <%= f.label :method_type_other, class: "method-type-label flex flex-col items-center justify-center p-4 border-2 border-gray-200 dark:border-gray-700 rounded-lg cursor-pointer transition-all duration-200 hover:border-gray-400 dark:hover:border-gray-500 hover:shadow-lg" do %>
          <div class="w-20 h-20 rounded-full bg-gradient-to-br from-gray-500 to-gray-600 shadow-md flex items-center justify-center mb-3 transform transition-transform duration-200 hover:scale-105">
            <%= icon "dots-horizontal", class: "w-10 h-10 text-white" %>
          </div>
          <span class="text-sm font-medium text-gray-900 dark:text-white">Other</span>
          <div class="absolute top-2 right-2 w-5 h-5 rounded-full border-2 border-gray-300 dark:border-gray-600 method-type-radio flex items-center justify-center">
            <div class="w-3 h-3 rounded-full bg-gray-500 dark:bg-gray-400 hidden method-type-radio-checked"></div>
          </div>
          <div class="absolute -top-1 -right-1 w-6 h-6 rounded-full bg-gradient-to-br from-gray-500 to-gray-600 text-white flex items-center justify-center text-xs font-bold opacity-0 method-type-badge transform scale-0 transition-all duration-200">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" viewBox="0 0 20 20" fill="currentColor">
              <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd" />
            </svg>
          </div>
        <% end %>
      </div>
    </div>
  </div>

  <style>
    :root {
      --blue-500-rgb: 59, 130, 246;
      --purple-500-rgb: 168, 85, 247;
      --green-500-rgb: 34, 197, 94;
      --orange-500-rgb: 249, 115, 22;
      --gray-500-rgb: 107, 114, 128;
    }

    .method-type-label {
      transition: all 0.3s ease;
    }

    .method-type-badge {
      transition: all 0.3s cubic-bezier(0.175, 0.885, 0.32, 1.275);
    }

    .method-type-label:hover .w-20 {
      transform: scale(1.1) rotate(5deg);
      box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
    }

    @keyframes pulse-glow {
      0%, 100% { box-shadow: 0 0 15px rgba(var(--color-rgb), 0.5); }
      50% { box-shadow: 0 0 25px rgba(var(--color-rgb), 0.8); }
    }
  </style>

  <script>
    document.addEventListener('DOMContentLoaded', function() {
      const methodTypeInputs = document.querySelectorAll('.method-type-input');
      const methodTypeLabels = document.querySelectorAll('.method-type-label');

      function updateSelectedState() {
        methodTypeInputs.forEach((input, index) => {
          const label = methodTypeLabels[index];
          const radioChecked = label.querySelector('.method-type-radio-checked');
          const badge = label.querySelector('.method-type-badge');

          if (input.checked) {
            // Add selected styling
            const color = label.classList.contains('hover:border-blue-400') ? 'blue' :
                         label.classList.contains('hover:border-purple-400') ? 'purple' :
                         label.classList.contains('hover:border-green-400') ? 'green' :
                         label.classList.contains('hover:border-orange-400') ? 'orange' : 'gray';

            label.classList.add(`border-${color}-500`, `dark:border-${color}-600`, `shadow-lg`);
            label.classList.remove('border-gray-200', 'dark:border-gray-700');

            // Show the radio indicator
            if (radioChecked) radioChecked.classList.remove('hidden');

            // Show the checkmark badge with animation
            if (badge) {
              badge.classList.remove('opacity-0', 'scale-0');
              badge.classList.add('opacity-100', 'scale-100');
            }

            // Add a subtle glow effect with animation
            label.style.setProperty('--color-rgb', `var(--${color}-500-rgb)`);
            label.style.animation = 'pulse-glow 2s infinite';
            label.style.boxShadow = `0 0 15px rgba(var(--${color}-500-rgb), 0.5)`;
          } else {
            // Remove selected styling
            label.classList.remove(
              'border-blue-500', 'dark:border-blue-600', 'shadow-lg',
              'border-purple-500', 'dark:border-purple-600',
              'border-green-500', 'dark:border-green-600',
              'border-orange-500', 'dark:border-orange-600',
              'border-gray-500', 'dark:border-gray-600'
            );
            label.classList.add('border-gray-200', 'dark:border-gray-700');

            // Hide the radio indicator
            if (radioChecked) radioChecked.classList.add('hidden');

            // Hide the checkmark badge
            if (badge) {
              badge.classList.add('opacity-0', 'scale-0');
              badge.classList.remove('opacity-100', 'scale-100');
            }

            // Remove glow effect and animation
            label.style.boxShadow = '';
            label.style.animation = '';
          }
        });
      }

      // Initial state
      updateSelectedState();

      // Update on change
      methodTypeInputs.forEach(input => {
        input.addEventListener('change', updateSelectedState);
      });
    });
  </script>

  <div class="bg-gray-50 dark:bg-gray-800 rounded-lg p-6 mt-6 border border-gray-200 dark:border-gray-700">
    <h3 class="text-lg font-medium text-gray-800 dark:text-gray-200 mb-4 flex items-center">
      <span id="method-type-icon" class="w-6 h-6 mr-2 text-gray-500 dark:text-gray-400"><%= icon "credit-card" %></span>
      <span id="method-type-title">Payment Details</span>
    </h3>

    <div class="space-y-5">
      <%# Provider with Icon %>
      <div class="relative">
        <%= f.label :provider, class: "block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2" %>
        <div class="relative rounded-lg">
          <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
            <%= icon "office-building", class: "h-5 w-5 text-gray-400 dark:text-gray-500" %>
          </div>
          <%= f.text_field :provider,
              class: "py-3 pl-10 pr-3 block w-full border-gray-300 dark:border-gray-600 dark:bg-gray-700 dark:text-white rounded-lg focus:ring-primary-500 focus:border-primary-500 shadow-sm",
              placeholder: "e.g. Bank Name, Card Issuer, Mobile Network"
          %>
        </div>
        <div class="mt-2 flex items-center">
          <%= icon "information-circle", class: "w-4 h-4 text-gray-400 mr-1" %>
          <p class="text-sm text-gray-500 dark:text-gray-400">
            The provider of this payment method (optional)
          </p>
        </div>
      </div>

      <%# Account Number with Icon %>
      <div class="relative">
        <%= f.label :account_number, class: "block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2" %>
        <div class="relative rounded-lg">
          <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
            <%= icon "identification", class: "h-5 w-5 text-gray-400 dark:text-gray-500" %>
          </div>
          <%= f.text_field :account_number,
              class: "py-3 pl-10 pr-3 block w-full border-gray-300 dark:border-gray-600 dark:bg-gray-700 dark:text-white rounded-lg focus:ring-primary-500 focus:border-primary-500 shadow-sm",
              placeholder: "Account/Card number or Mobile Number",
              required: true
          %>
        </div>
        <div class="mt-2 flex items-center">
          <%= icon "lock-closed", class: "w-4 h-4 text-gray-400 mr-1" %>
          <p class="text-sm text-gray-500 dark:text-gray-400">
            Your account number is securely encrypted
          </p>
        </div>
      </div>

      <div class="grid grid-cols-1 md:grid-cols-2 gap-5">
        <%# Account Name with Icon %>
        <div class="relative">
          <%= f.label :account_name, class: "block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2" %>
          <div class="relative rounded-lg">
            <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
              <%= icon "user", class: "h-5 w-5 text-gray-400 dark:text-gray-500" %>
            </div>
            <%= f.text_field :account_name,
                class: "py-3 pl-10 pr-3 block w-full border-gray-300 dark:border-gray-600 dark:bg-gray-700 dark:text-white rounded-lg focus:ring-primary-500 focus:border-primary-500 shadow-sm",
                placeholder: "Name on account/card"
            %>
          </div>
          <div class="mt-2 flex items-center">
            <%= icon "information-circle", class: "w-4 h-4 text-gray-400 mr-1" %>
            <p class="text-sm text-gray-500 dark:text-gray-400">
              Name associated with this method (optional)
            </p>
          </div>
        </div>

        <%# Expiry Date with Icon %>
        <div class="relative">
          <%= f.label :expiry_date, class: "block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2" %>
          <div class="relative rounded-lg">
            <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
              <%= icon "calendar", class: "h-5 w-5 text-gray-400 dark:text-gray-500" %>
            </div>
            <%= f.date_field :expiry_date,
                class: "py-3 pl-10 pr-3 block w-full border-gray-300 dark:border-gray-600 dark:bg-gray-700 dark:text-white rounded-lg focus:ring-primary-500 focus:border-primary-500 shadow-sm"
            %>
          </div>
          <div class="mt-2 flex items-center">
            <%= icon "information-circle", class: "w-4 h-4 text-gray-400 mr-1" %>
            <p class="text-sm text-gray-500 dark:text-gray-400">
              Expiry date if applicable (optional)
            </p>
          </div>
        </div>
      </div>

      <%# Description with Icon %>
      <div class="relative">
        <%= f.label :description, class: "block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2" %>
        <div class="relative rounded-lg">
          <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
            <%= icon "pencil-alt", class: "h-5 w-5 text-gray-400 dark:text-gray-500" %>
          </div>
          <%= f.text_field :description,
              class: "py-3 pl-10 pr-3 block w-full border-gray-300 dark:border-gray-600 dark:bg-gray-700 dark:text-white rounded-lg focus:ring-primary-500 focus:border-primary-500 shadow-sm",
              placeholder: "e.g. My Personal Card, Business Account",
              required: true
          %>
        </div>
        <div class="mt-2 flex items-center">
          <%= icon "information-circle", class: "w-4 h-4 text-gray-400 mr-1" %>
          <p class="text-sm text-gray-500 dark:text-gray-400">
            A friendly name to help you identify this payment method
          </p>
        </div>
      </div>
    </div>
  </div>

  <%# Enhanced Default Option with vibrant visuals %>
  <div class="mt-6 bg-gradient-to-r from-amber-500/10 to-yellow-500/10 dark:from-amber-900/20 dark:to-yellow-900/20 p-6 rounded-xl border border-amber-200 dark:border-amber-800/30 relative overflow-hidden">
    <!-- Decorative elements -->
    <div class="absolute top-0 right-0 w-32 h-32 bg-yellow-500/5 rounded-full -mt-10 -mr-10"></div>
    <div class="absolute bottom-0 left-0 w-24 h-24 bg-amber-500/5 rounded-full -mb-8 -ml-8"></div>

    <div class="relative flex items-start">
      <div class="flex-shrink-0 mt-1">
        <div class="relative">
          <%= f.check_box :default,
              class: "h-6 w-6 text-amber-500 border-2 border-amber-300 dark:border-amber-700 rounded-md focus:ring-amber-500 focus:ring-offset-2 focus:ring-offset-amber-100 dark:focus:ring-offset-amber-900 transition-all cursor-pointer",
              id: "payment_method_default_enhanced" %>
          <label for="payment_method_default_enhanced" class="absolute inset-0 cursor-pointer"></label>
        </div>
      </div>

      <div class="ml-4">
        <div class="flex items-center">
          <%= icon "star", class: "w-6 h-6 text-amber-500 mr-2" %>
          <%= f.label :default, "Make this my default payment method",
              class: "text-lg font-bold text-amber-800 dark:text-amber-300",
              for: "payment_method_default_enhanced" %>
        </div>

        <div class="mt-2 flex items-start">
          <div class="flex-shrink-0 mt-1">
            <%= icon "information-circle", class: "w-5 h-5 text-amber-600 dark:text-amber-400" %>
          </div>
          <p class="ml-2 text-base text-amber-700 dark:text-amber-400">
            When selected, this payment method will be automatically used for deposits and withdrawals, making transactions faster and easier.
          </p>
        </div>

        <div class="mt-3 bg-white/50 dark:bg-black/20 rounded-lg p-3 border border-amber-200 dark:border-amber-800/30 flex items-center">
          <%= icon "lightning-bolt", class: "w-5 h-5 text-amber-600 dark:text-amber-400 mr-2 flex-shrink-0" %>
          <p class="text-sm text-amber-800 dark:text-amber-300">
            <strong>Quick Tip:</strong> Setting a default payment method saves you time by skipping the payment selection step during transactions.
          </p>
        </div>
      </div>
    </div>
  </div>

  <%# Enhanced Submit Buttons with vibrant colors and icons %>
  <div class="mt-8 flex flex-col-reverse sm:flex-row sm:justify-between items-center">
    <div class="w-full sm:w-auto mt-4 sm:mt-0">
      <%= link_to payment_methods_path, class: "flex items-center text-gray-600 dark:text-gray-400 hover:text-gray-800 dark:hover:text-gray-200 transition-colors" do %>
        <%= icon "arrow-left", class: "w-5 h-5 mr-2" %>
        <span>Back to payment methods</span>
      <% end %>
    </div>

    <div class="flex flex-col-reverse sm:flex-row sm:space-x-4 w-full sm:w-auto">
      <%= link_to payment_methods_path, class: "btn-white-outline w-full sm:w-auto mb-3 sm:mb-0 py-3 px-6 flex items-center justify-center rounded-xl border-2 border-gray-300 dark:border-gray-600 text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-800 transition-all" do %>
        <%= icon "x", class: "w-5 h-5 mr-2" %>
        <span>Cancel</span>
      <% end %>

      <%
        button_text = payment_method.new_record? ? "Add Payment Method" : "Update Payment Method"
        button_icon = payment_method.new_record? ? "plus-circle" : "check-circle"
        button_gradient = payment_method.new_record? ? "from-green-500 to-emerald-600" : "from-blue-500 to-indigo-600"
      %>

      <button type="submit" class="w-full sm:w-auto py-4 px-8 rounded-xl font-bold text-white shadow-lg flex items-center justify-center bg-gradient-to-r <%= button_gradient %> hover:shadow-xl transition-all transform hover:-translate-y-1">
        <%= icon button_icon, class: "w-6 h-6 mr-3" %>
        <span><%= button_text %></span>
      </button>
    </div>
  </div>

  <script>
    document.addEventListener('DOMContentLoaded', function() {
      const methodTypeInputs = document.querySelectorAll('.method-type-input');
      const methodTypeIcon = document.getElementById('method-type-icon');
      const methodTypeTitle = document.getElementById('method-type-title');

      function updateMethodTypeHeader() {
        let selectedType = '';
        let selectedIcon = 'credit-card';
        let selectedColor = 'gray';

        methodTypeInputs.forEach(input => {
          if (input.checked) {
            selectedType = input.value;

            // Set icon and color based on selected type
            switch(selectedType) {
              case 'bank':
                selectedIcon = 'bank';
                selectedColor = 'blue';
                selectedTitle = 'Bank Account Details';
                break;
              case 'card':
                selectedIcon = 'credit-card';
                selectedColor = 'purple';
                selectedTitle = 'Card Details';
                break;
              case 'mobile_money':
                selectedIcon = 'smartphone';
                selectedColor = 'green';
                selectedTitle = 'Mobile Money Details';
                break;
              case 'wallet':
                selectedIcon = 'wallet';
                selectedColor = 'orange';
                selectedTitle = 'Digital Wallet Details';
                break;
              default:
                selectedIcon = 'credit-card';
                selectedColor = 'gray';
                selectedTitle = 'Payment Details';
            }
          }
        });

        // Update the icon and title
        methodTypeIcon.innerHTML = `<svg class="w-6 h-6 text-${selectedColor}-500" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="${getIconPath(selectedIcon)}" /></svg>`;
        methodTypeTitle.textContent = selectedTitle;
      }

      function getIconPath(iconName) {
        switch(iconName) {
          case 'bank':
            return "M3 6a2 2 0 012-2h14a2 2 0 012 2v12a2 2 0 01-2 2H5a2 2 0 01-2-2V6zm16 0H5v12h14V6z M16 10a2 2 0 100-4 2 2 0 000 4z M12 14a2 2 0 100-4 2 2 0 000 4z M8 18a2 2 0 100-4 2 2 0 000 4z";
          case 'credit-card':
            return "M3 10h18M7 15h1m4 0h1m-7 4h12a3 3 0 003-3V8a3 3 0 00-3-3H6a3 3 0 00-3 3v8a3 3 0 003 3z";
          case 'smartphone':
            return "M12 18h.01M8 21h8a2 2 0 002-2V5a2 2 0 00-2-2H8a2 2 0 00-2 2v14a2 2 0 002 2z";
          case 'wallet':
            return "M3 10h18M7 15h1m4 0h1m-7 4h12a3 3 0 003-3V8a3 3 0 00-3-3H6a3 3 0 00-3 3v8a3 3 0 003 3z";
          default:
            return "M3 10h18M7 15h1m4 0h1m-7 4h12a3 3 0 003-3V8a3 3 0 00-3-3H6a3 3 0 00-3 3v8a3 3 0 003 3z";
        }
      }

      // Initial update
      updateMethodTypeHeader();

      // Update on change
      methodTypeInputs.forEach(input => {
        input.addEventListener('change', updateMethodTypeHeader);
      });
    });
  </script>
<% end %>
