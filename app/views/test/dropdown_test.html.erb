<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Dropdown Test</title>
  
  <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
  
  <style>
    /* Dark mode styles */
    html.dark {
      background-color: #1f2937;
      color: #f9fafb;
    }
    
    html:not(.dark) {
      background-color: #f9fafb;
      color: #1f2937;
    }
  </style>
</head>
<body class="p-6">
  <div class="max-w-3xl mx-auto">
    <div class="bg-white dark:bg-gray-800 shadow rounded-lg p-6 mb-6">
      <h1 class="text-2xl font-bold mb-6">Dropdown Test Page</h1>
      
      <div class="space-y-8">
        <!-- First Dropdown -->
        <div class="mb-6">
          <h2 class="text-lg font-semibold mb-4">Simple Dropdown</h2>
          
          <div class="relative inline-block dropdown">
            <button class="dropdown-toggle px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700">
              Click Me
            </button>
            
            <div class="dropdown-menu absolute left-0 mt-2 w-48 rounded-lg shadow-lg bg-white dark:bg-gray-800 ring-1 ring-black ring-opacity-5 border border-gray-100 dark:border-gray-700 hidden overflow-hidden z-50">
              <div class="py-1">
                <a href="#" class="block px-4 py-2 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700">Option 1</a>
                <a href="#" class="block px-4 py-2 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700">Option 2</a>
                <a href="#" class="block px-4 py-2 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700">Option 3</a>
              </div>
            </div>
          </div>
        </div>
        
        <!-- Second Dropdown with Icon -->
        <div class="mb-6">
          <h2 class="text-lg font-semibold mb-4">Icon Dropdown</h2>
          
          <div class="relative inline-block dropdown">
            <button class="dropdown-toggle p-2 rounded-full bg-gray-200 dark:bg-gray-700 hover:bg-gray-300 dark:hover:bg-gray-600">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 5v.01M12 12v.01M12 19v.01M12 6a1 1 0 110-2 1 1 0 010 2zm0 7a1 1 0 110-2 1 1 0 010 2zm0 7a1 1 0 110-2 1 1 0 010 2z" />
              </svg>
            </button>
            
            <div class="dropdown-menu absolute right-0 mt-2 w-56 rounded-lg shadow-lg bg-white dark:bg-gray-800 ring-1 ring-black ring-opacity-5 border border-gray-100 dark:border-gray-700 hidden overflow-hidden z-50">
              <div class="py-1">
                <div class="px-4 py-3 text-sm text-gray-900 dark:text-white border-b border-gray-200 dark:border-gray-700">
                  <div class="font-medium">Menu Title</div>
                  <div class="font-light text-gray-500 dark:text-gray-400">Description text</div>
                </div>
                <a href="#" class="block px-4 py-2 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700">Edit</a>
                <a href="#" class="block px-4 py-2 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700">Duplicate</a>
                <a href="#" class="block px-4 py-2 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700">Share</a>
                <div class="border-t border-gray-200 dark:border-gray-700"></div>
                <a href="#" class="block px-4 py-2 text-sm text-red-600 dark:text-red-400 hover:bg-gray-100 dark:hover:bg-gray-700">Delete</a>
              </div>
            </div>
          </div>
        </div>
        
        <!-- Profile Dropdown -->
        <div class="mb-6">
          <h2 class="text-lg font-semibold mb-4">Profile Dropdown</h2>
          
          <div class="relative inline-block dropdown">
            <button class="dropdown-toggle flex items-center space-x-3 p-2 rounded-lg bg-gray-100 dark:bg-gray-700 hover:bg-gray-200 dark:hover:bg-gray-600">
              <div class="h-8 w-8 rounded-full bg-blue-600 flex items-center justify-center text-white font-bold">
                SG
              </div>
              <span>Super Ghana</span>
              <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd" />
              </svg>
            </button>
            
            <div class="dropdown-menu absolute right-0 mt-2 w-64 rounded-lg shadow-lg bg-white dark:bg-gray-800 ring-1 ring-black ring-opacity-5 border border-gray-100 dark:border-gray-700 hidden overflow-hidden z-50">
              <div class="p-4 border-b border-gray-200 dark:border-gray-700 text-center">
                <div class="inline-block h-16 w-16 rounded-full bg-blue-600 flex items-center justify-center text-white text-xl font-bold mb-2">
                  SG
                </div>
                <h3 class="text-lg font-bold text-gray-900 dark:text-white">
                  Guest User
                </h3>
                <p class="text-sm text-gray-600 dark:text-gray-400 mt-1">
                  guest@example.com
                </p>
              </div>
              
              <div class="py-2">
                <a href="#" class="block px-4 py-2 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700">
                  My Profile
                </a>
                <a href="#" class="block px-4 py-2 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700">
                  Settings
                </a>
                <a href="#" class="block px-4 py-2 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700">
                  Help Center
                </a>
                <div class="border-t border-gray-200 dark:border-gray-700 my-1"></div>
                <a href="#" class="block px-4 py-2 text-sm text-red-600 dark:text-red-400 hover:bg-gray-100 dark:hover:bg-gray-700">
                  Sign out
                </a>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
    
    <div class="bg-white dark:bg-gray-800 shadow rounded-lg p-6">
      <h2 class="text-xl font-bold mb-4">Theme Toggle</h2>
      
      <button id="theme-toggle" class="px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded transition-colors flex items-center">
        Toggle Theme
        <!-- Moon icon (shown in light mode) -->
        <svg id="theme-dark-icon" class="h-5 w-5 ml-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z" />
        </svg>
        <!-- Sun icon (shown in dark mode) -->
        <svg id="theme-light-icon" class="h-5 w-5 ml-2 hidden" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z" />
        </svg>
      </button>
    </div>
  </div>
  
  <script>
    // Dropdown functionality
    document.addEventListener('DOMContentLoaded', function() {
      // Find all dropdowns
      const dropdowns = document.querySelectorAll('.dropdown');
      
      dropdowns.forEach(dropdown => {
        const toggle = dropdown.querySelector('.dropdown-toggle');
        const menu = dropdown.querySelector('.dropdown-menu');
        
        if (toggle && menu) {
          // Toggle the dropdown when clicking the toggle button
          toggle.addEventListener('click', function(e) {
            e.stopPropagation();
            
            // Close all other dropdowns first
            document.querySelectorAll('.dropdown-menu').forEach(otherMenu => {
              if (otherMenu !== menu && !otherMenu.classList.contains('hidden')) {
                otherMenu.classList.add('hidden');
              }
            });
            
            // Toggle this menu
            menu.classList.toggle('hidden');
          });
        }
      });
      
      // Close dropdowns when clicking outside
      document.addEventListener('click', function(e) {
        document.querySelectorAll('.dropdown-menu').forEach(menu => {
          if (!menu.classList.contains('hidden')) {
            const dropdown = menu.closest('.dropdown');
            
            if (dropdown && !dropdown.contains(e.target)) {
              menu.classList.add('hidden');
            }
          }
        });
      });
      
      // Close dropdowns on escape key
      document.addEventListener('keydown', function(e) {
        if (e.key === 'Escape') {
          document.querySelectorAll('.dropdown-menu').forEach(menu => {
            if (!menu.classList.contains('hidden')) {
              menu.classList.add('hidden');
            }
          });
        }
      });
      
      // Theme toggling
      const themeToggle = document.getElementById('theme-toggle');
      const darkIcon = document.getElementById('theme-dark-icon');
      const lightIcon = document.getElementById('theme-light-icon');
      
      // Update icons based on current theme
      function updateThemeIcons() {
        const isDark = document.documentElement.classList.contains('dark');
        
        if (darkIcon && lightIcon) {
          darkIcon.classList.toggle('hidden', isDark);
          lightIcon.classList.toggle('hidden', !isDark);
        }
      }
      
      // Initial icon update
      updateThemeIcons();
      
      // Toggle theme on button click
      if (themeToggle) {
        themeToggle.addEventListener('click', function() {
          // Toggle theme class
          const isDark = document.documentElement.classList.contains('dark');
          
          if (isDark) {
            document.documentElement.classList.remove('dark');
            localStorage.setItem('theme', 'light');
          } else {
            document.documentElement.classList.add('dark');
            localStorage.setItem('theme', 'dark');
          }
          
          // Update icons
          updateThemeIcons();
        });
      }
    });
    
    // Initialize theme based on localStorage or system preference
    (function() {
      const savedTheme = localStorage.getItem('theme');
      const systemPrefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
      const shouldBeDark = savedTheme === 'dark' || (savedTheme !== 'light' && systemPrefersDark);
      
      if (shouldBeDark) {
        document.documentElement.classList.add('dark');
      } else {
        document.documentElement.classList.remove('dark');
      }
    })();
  </script>
</body>
</html>
