<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Theme Test</title>
  
  <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
  
  <script>
    // Simple theme manager
    const ThemeManager = {
      init: function() {
        console.log('ThemeManager initializing...');
        const savedTheme = localStorage.getItem('theme');
        const systemPrefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
        const shouldBeDark = savedTheme === 'dark' || (savedTheme !== 'light' && systemPrefersDark);
        
        if (shouldBeDark) {
          document.documentElement.classList.add('dark');
        } else {
          document.documentElement.classList.remove('dark');
        }
        
        this.updateStatusDisplay();
        console.log('Theme initialized as:', shouldBeDark ? 'dark' : 'light');
      },
      
      toggle: function() {
        const isDark = document.documentElement.classList.contains('dark');
        
        if (isDark) {
          document.documentElement.classList.remove('dark');
          localStorage.setItem('theme', 'light');
        } else {
          document.documentElement.classList.add('dark');
          localStorage.setItem('theme', 'dark');
        }
        
        this.updateStatusDisplay();
        console.log('Theme toggled to:', !isDark ? 'dark' : 'light');
      },
      
      updateStatusDisplay: function() {
        const isDark = document.documentElement.classList.contains('dark');
        const statusElement = document.getElementById('theme-status');
        
        if (statusElement) {
          statusElement.textContent = isDark ? 'Dark' : 'Light';
          statusElement.className = isDark 
            ? 'px-2 py-1 bg-blue-800 text-white rounded'
            : 'px-2 py-1 bg-yellow-400 text-black rounded';
        }
        
        // Update icon visibility
        const moonIcon = document.getElementById('moon-icon');
        const sunIcon = document.getElementById('sun-icon');
        
        if (moonIcon && sunIcon) {
          moonIcon.classList.toggle('hidden', isDark);
          sunIcon.classList.toggle('hidden', !isDark);
        }
      }
    };
    
    // Initialize theme immediately
    ThemeManager.init();
    
    // Also initialize when DOM is ready
    document.addEventListener('DOMContentLoaded', function() {
      ThemeManager.updateStatusDisplay();
    });
  </script>
  
  <style>
    /* Dark mode styles */
    html.dark {
      background-color: #1f2937;
      color: #f9fafb;
    }
    
    html:not(.dark) {
      background-color: #f9fafb;
      color: #1f2937;
    }
    
    /* Add smooth transitions */
    body {
      transition: background-color 0.3s ease, color 0.3s ease;
    }
    
    .dark-card {
      background-color: #111827;
      border-color: #374151;
    }
    
    .light-card {
      background-color: white;
      border-color: #e5e7eb;
    }
  </style>
</head>
<body class="p-6">
  <div class="max-w-3xl mx-auto">
    <div class="dark:bg-gray-800 bg-white shadow rounded-lg p-6 mb-6 transition-all">
      <h1 class="text-2xl font-bold mb-4">Theme Test Page</h1>
      
      <div class="mb-6">
        <p class="mb-2">Current theme: <span id="theme-status" class="px-2 py-1 bg-yellow-400 text-black rounded">Light</span></p>
        
        <button onclick="ThemeManager.toggle()" class="mt-4 px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded transition-colors flex items-center">
          Toggle Theme
          <!-- Moon icon (shown in light mode) -->
          <svg id="moon-icon" xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 ml-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z" />
          </svg>
          <!-- Sun icon (shown in dark mode) -->
          <svg id="sun-icon" xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 ml-2 hidden" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z" />
          </svg>
        </button>
      </div>
      
      <div class="space-y-4">
        <div class="dark:bg-gray-700 bg-gray-100 p-4 rounded-lg">
          <h2 class="text-lg font-semibold mb-2">This is a content card</h2>
          <p>This card will change appearance based on the theme.</p>
        </div>
        
        <div class="dark:bg-gray-700 bg-gray-100 p-4 rounded-lg">
          <h2 class="text-lg font-semibold mb-2">Another content card</h2>
          <p>This demonstrates how well the theme toggle is working.</p>
        </div>
      </div>
    </div>
    
    <div class="dark:bg-gray-800 bg-white shadow rounded-lg p-6 transition-all">
      <h2 class="text-xl font-bold mb-4">Theme System Debug Info</h2>
      
      <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
        <div>
          <h3 class="text-lg font-medium mb-2">Current Settings</h3>
          <ul class="space-y-2">
            <li><strong>Dark Mode Class:</strong> <span id="dark-class-status">Not Applied</span></li>
            <li><strong>localStorage Theme:</strong> <span id="local-storage-status">Not Set</span></li>
            <li><strong>System Preference:</strong> <span id="system-pref-status">Unknown</span></li>
          </ul>
        </div>
        
        <div>
          <h3 class="text-lg font-medium mb-2">Actions</h3>
          <div class="space-y-2">
            <button onclick="localStorage.setItem('theme', 'dark'); ThemeManager.init()" class="w-full px-3 py-2 bg-gray-200 dark:bg-gray-700 hover:bg-gray-300 dark:hover:bg-gray-600 rounded">
              Set Theme to Dark
            </button>
            <button onclick="localStorage.setItem('theme', 'light'); ThemeManager.init()" class="w-full px-3 py-2 bg-gray-200 dark:bg-gray-700 hover:bg-gray-300 dark:hover:bg-gray-600 rounded">
              Set Theme to Light
            </button>
            <button onclick="localStorage.removeItem('theme'); ThemeManager.init()" class="w-full px-3 py-2 bg-gray-200 dark:bg-gray-700 hover:bg-gray-300 dark:hover:bg-gray-600 rounded">
              Use System Preference
            </button>
            <button onclick="console.log(ThemeManager); alert('Check console for ThemeManager details')" class="w-full px-3 py-2 bg-gray-200 dark:bg-gray-700 hover:bg-gray-300 dark:hover:bg-gray-600 rounded">
              Debug ThemeManager
            </button>
          </div>
        </div>
      </div>
    </div>
  </div>
  
  <script>
    // Update debug info when document is ready
    document.addEventListener('DOMContentLoaded', function() {
      function updateDebugInfo() {
        // Update dark class status
        const darkClassStatus = document.getElementById('dark-class-status');
        if (darkClassStatus) {
          const hasDarkClass = document.documentElement.classList.contains('dark');
          darkClassStatus.textContent = hasDarkClass ? 'Applied' : 'Not Applied';
          darkClassStatus.className = hasDarkClass 
            ? 'font-medium text-green-600 dark:text-green-400' 
            : 'font-medium text-red-600 dark:text-red-400';
        }
        
        // Update localStorage status
        const localStorageStatus = document.getElementById('local-storage-status');
        if (localStorageStatus) {
          const theme = localStorage.getItem('theme');
          localStorageStatus.textContent = theme || 'Not Set (System)';
        }
        
        // Update system preference status
        const systemPrefStatus = document.getElementById('system-pref-status');
        if (systemPrefStatus) {
          const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
          systemPrefStatus.textContent = prefersDark ? 'Dark' : 'Light';
        }
      }
      
      // Initial update
      updateDebugInfo();
      
      // Update every second to keep debug info current
      setInterval(updateDebugInfo, 1000);
    });
  </script>
</body>
</html>
